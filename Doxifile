import telebot
import sqlite3
from telebot import types
import os
from pathlib import Path

bot = telebot.TeleBot(token='ЧАСТНОЕ ПОЛЬЗОВАНИЕ')
name = None
artist = None
old_name = None

# Кроссплатформенные пути
BASE_DIR = Path(file).parent
MUSIC_DIR = BASE_DIR / 'MUSIC'
DB_FILE = BASE_DIR / 'music.sql'

# Создаём папку для музыки, если её нет
MUSIC_DIR.mkdir(exist_ok=True)

def main():
    def get_playlist_info():
        """Получаем информацию о плейлисте из БД"""
        with sqlite3.connect(DB_FILE) as conn:
            cur = conn.cursor()
            cur.execute('SELECT * FROM loadings')
            loadings = cur.fetchall()
            info = '\n'.join(f'Название трека: {i[1]}, Исполнитель: {i[2]}' for i in loadings)
            return info

    def create_main_markup():
        """Создаём основную клавиатуру"""
        markup = types.ReplyKeyboardMarkup()
        btn_list = ['/listen', '/add', '/view_all', '/options']
        for btn in btn_list:
            markup.row(types.KeyboardButton(btn))
        return markup

    @bot.message_handler(commands=['start'])
    def start(message):
        """Обработка команды /start"""
        bot.send_message(message.chat.id, 
                        f'Привет, {message.from_user.first_name}, напиши /help',
                        reply_markup=create_main_markup())

    @bot.message_handler(commands=['listen'])
    def listen(message):
        """Воспроизведение трека"""
        try:
            bot.send_message(message.chat.id, 'ВАШ ПЛЕЙЛИСТ:')
            bot.send_message(message.chat.id, get_playlist_info())
            bot.register_next_step_handler(message, music_player)
        except sqlite3.OperationalError:
            bot.send_message(message.chat.id, 'Ты пока не загрузил песни')

    def music_player(message):
        """Воспроизведение выбранного трека"""
        checkout = message.text
        with sqlite3.connect(DB_FILE) as conn:
            cur = conn.cursor()
            cur.execute('SELECT * FROM loadings WHERE name=?', (checkout,))
            track = cur.fetchone()

        if track:
            file_path = MUSIC_DIR / f'{checkout}.mp3'
            if file_path.exists():
                with open(file_path, 'rb') as file:
                    bot.send_audio(message.chat.id, file, title=f'{checkout}')
            else:
                bot.send_message(message.chat.id, 'Файл не найден на сервере')

    @bot.message_handler(commands=['add'])
    def song_name(message):
        """Добавление нового трека"""
        with sqlite3.connect(DB_FILE) as conn:
            conn.execute('CREATE TABLE IF NOT EXISTS loadings (id INTEGER PRIMARY KEY, name TEXT, artist TEXT)')
        bot.send_message(message.chat.id, 'Введи название песни')
        bot.register_next_step_handler(message, naming)

    def naming(message):
        """Получение названия трека"""
        global name
        name = message.text.strip()
        bot.send_message(message.chat.id, 'Отправь аудиофайл')
        bot.register_next_step_handler(message, save_audio)

    @bot.message_handler(content_types=['audio'])
    def save_audio(message):
        """Сохранение аудиофайла"""
        try:
            global name, artist
            artist = message.audio.performer or 'Неизвестный исполнитель'
            audio_name = MUSIC_DIR / f"{name}.mp3"
            
            # Скачиваем и сохраняем файл
            file_info = bot.get_file(message.audio.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            
            with open(audio_name, 'wb') as new_file:
                new_file.write(downloaded_file)

            # Сохраняем в БД
            with sqlite3.connect(DB_FILE) as conn:
                conn.execute('INSERT INTO loadings (name, artist) VALUES (?, ?)', (name, artist))
markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('Весь плейлист', callback_data='loadings'))
            bot.send_message(message.chat.id, 'Трек добавлен', reply_markup=markup)
        except Exception as e:
            bot.send_message(message.chat.id, f'Ошибка: {str(e)}')

    # Остальные обработчики (delete, edit и т.д.) аналогично адаптируем

    bot.polling()

if name == 'main':
    main()